// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: grade.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GradeService_CreateGrade_FullMethodName = "/grpc.GradeService/CreateGrade"
	GradeService_UpdateGrade_FullMethodName = "/grpc.GradeService/UpdateGrade"
	GradeService_GetGrade_FullMethodName    = "/grpc.GradeService/GetGrade"
	GradeService_ListGrades_FullMethodName  = "/grpc.GradeService/ListGrades"
	GradeService_DeleteGrade_FullMethodName = "/grpc.GradeService/DeleteGrade"
)

// GradeServiceClient is the client API for GradeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GradeServiceClient interface {
	CreateGrade(ctx context.Context, in *CreateGradeRequest, opts ...grpc.CallOption) (*Grade, error)
	UpdateGrade(ctx context.Context, in *UpdateGradeRequest, opts ...grpc.CallOption) (*Grade, error)
	GetGrade(ctx context.Context, in *GetGradeRequest, opts ...grpc.CallOption) (*GetGradeResponse, error)
	ListGrades(ctx context.Context, in *ListGradesRequest, opts ...grpc.CallOption) (*ListGradesResponse, error)
	DeleteGrade(ctx context.Context, in *DeleteGradeRequest, opts ...grpc.CallOption) (*Grade, error)
}

type gradeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGradeServiceClient(cc grpc.ClientConnInterface) GradeServiceClient {
	return &gradeServiceClient{cc}
}

func (c *gradeServiceClient) CreateGrade(ctx context.Context, in *CreateGradeRequest, opts ...grpc.CallOption) (*Grade, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Grade)
	err := c.cc.Invoke(ctx, GradeService_CreateGrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeServiceClient) UpdateGrade(ctx context.Context, in *UpdateGradeRequest, opts ...grpc.CallOption) (*Grade, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Grade)
	err := c.cc.Invoke(ctx, GradeService_UpdateGrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeServiceClient) GetGrade(ctx context.Context, in *GetGradeRequest, opts ...grpc.CallOption) (*GetGradeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGradeResponse)
	err := c.cc.Invoke(ctx, GradeService_GetGrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeServiceClient) ListGrades(ctx context.Context, in *ListGradesRequest, opts ...grpc.CallOption) (*ListGradesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGradesResponse)
	err := c.cc.Invoke(ctx, GradeService_ListGrades_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeServiceClient) DeleteGrade(ctx context.Context, in *DeleteGradeRequest, opts ...grpc.CallOption) (*Grade, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Grade)
	err := c.cc.Invoke(ctx, GradeService_DeleteGrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GradeServiceServer is the server API for GradeService service.
// All implementations must embed UnimplementedGradeServiceServer
// for forward compatibility
type GradeServiceServer interface {
	CreateGrade(context.Context, *CreateGradeRequest) (*Grade, error)
	UpdateGrade(context.Context, *UpdateGradeRequest) (*Grade, error)
	GetGrade(context.Context, *GetGradeRequest) (*GetGradeResponse, error)
	ListGrades(context.Context, *ListGradesRequest) (*ListGradesResponse, error)
	DeleteGrade(context.Context, *DeleteGradeRequest) (*Grade, error)
	mustEmbedUnimplementedGradeServiceServer()
}

// UnimplementedGradeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGradeServiceServer struct {
}

func (UnimplementedGradeServiceServer) CreateGrade(context.Context, *CreateGradeRequest) (*Grade, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGrade not implemented")
}
func (UnimplementedGradeServiceServer) UpdateGrade(context.Context, *UpdateGradeRequest) (*Grade, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGrade not implemented")
}
func (UnimplementedGradeServiceServer) GetGrade(context.Context, *GetGradeRequest) (*GetGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGrade not implemented")
}
func (UnimplementedGradeServiceServer) ListGrades(context.Context, *ListGradesRequest) (*ListGradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGrades not implemented")
}
func (UnimplementedGradeServiceServer) DeleteGrade(context.Context, *DeleteGradeRequest) (*Grade, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGrade not implemented")
}
func (UnimplementedGradeServiceServer) mustEmbedUnimplementedGradeServiceServer() {}

// UnsafeGradeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GradeServiceServer will
// result in compilation errors.
type UnsafeGradeServiceServer interface {
	mustEmbedUnimplementedGradeServiceServer()
}

func RegisterGradeServiceServer(s grpc.ServiceRegistrar, srv GradeServiceServer) {
	s.RegisterService(&GradeService_ServiceDesc, srv)
}

func _GradeService_CreateGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).CreateGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GradeService_CreateGrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).CreateGrade(ctx, req.(*CreateGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GradeService_UpdateGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).UpdateGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GradeService_UpdateGrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).UpdateGrade(ctx, req.(*UpdateGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GradeService_GetGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).GetGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GradeService_GetGrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).GetGrade(ctx, req.(*GetGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GradeService_ListGrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).ListGrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GradeService_ListGrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).ListGrades(ctx, req.(*ListGradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GradeService_DeleteGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).DeleteGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GradeService_DeleteGrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).DeleteGrade(ctx, req.(*DeleteGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GradeService_ServiceDesc is the grpc.ServiceDesc for GradeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GradeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.GradeService",
	HandlerType: (*GradeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGrade",
			Handler:    _GradeService_CreateGrade_Handler,
		},
		{
			MethodName: "UpdateGrade",
			Handler:    _GradeService_UpdateGrade_Handler,
		},
		{
			MethodName: "GetGrade",
			Handler:    _GradeService_GetGrade_Handler,
		},
		{
			MethodName: "ListGrades",
			Handler:    _GradeService_ListGrades_Handler,
		},
		{
			MethodName: "DeleteGrade",
			Handler:    _GradeService_DeleteGrade_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grade.proto",
}
